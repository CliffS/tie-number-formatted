NAME
    Tie::Number::Formatted - Numbers that stringify formatted

VERSION
    Version 0.0.1

SYNOPSIS
        use Tie::Number::Formatted;

        tie my $number, 'Tie::Number::Formatted';
        $number = 12345.67;
        say $number;    # prints "£ 12,345.67"
        $number /= 100;
        say $number;    # prints "£ 123.46"

        tie my $number, 'Tie::Number::Formatted', (
            symbol    => '$'    # default is '£ '
            precision => 4      # default is 2
        );
        $number = 12345.67;
        say $number;    # prints "$12,345.6700"

EXPORT
    Nothing is exported.

DEPENDENCIES
    Perl version 5.14.0 or higher

    Number::Format to do the actual formatting

    Scalar::Util for looks_like_number

    Carp for warnings

SYNTAX
  Tying a scalar
    This ties a scalar in such a way that normal numeric operations work on
    it but that it prints according to the required format.

  Beware
    If a tied scalar is assigned to another scalar, the new scalar will
    still have the same magic. However it will not be tied so reassigning it
    will break the magic.

    For example:

        tie my $number, 'Tie::Number::Formatted';
        $number = 123.45;
        my $other = number;
        say $number;    # "£ 123.45"
        $number = 100;
        say $number;    # "£ 100.00"
        say $other;     # "£ 123.45"
        $other = 100;
        say $other;     # "100"

AUTHOR
    Cliff Stanford, "<cpan@may.be>"

BUGS
    Please report any bugs or feature requests to "bug-tie-number-formatted
    at rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Tie-Number-Formatted>. I
    will be notified, and then you'll automatically be notified of progress
    on your bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc Tie::Number::Formatted

LICENSE AND COPYRIGHT
    Copyright 2014 Cliff Stanford.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

